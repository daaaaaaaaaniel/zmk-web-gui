/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define TBLE_ORTHO   true
// #define TBLE_MIT     true
// #define TBLE_DUAL_2U true

#define BAS_L 0
#define ALT_L 1
#define NAV_L 2
#define NUM_L 3
#define SYM_L 4
#define SFT_L 5
#define DBL_L 6
#define EXT_L 7
#define FUN_L 8
#define SET_L 9

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

&sk {
    release-after-ms = <2000>;
    quick-release;
};

#define BT(n) BT_SEL n


/ {
    chosen {
       zmk,matrix_transform =
#ifdef TBLE_DUAL_2U
                       &dual_2u_transform;
#elif defined(TBLE_MIT)
                       &mit_transform;
#else
                       &ortho_transform;
#endif
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
	tri_layer {
	    if-layers = <NAV_L NUM_L>;
	    then-layer = <SYM_L>;
	};
	tri_layer {
	    if-layers = <ALT_L NUM_L>;
	    then-layer = <SFT_L>;
	};
    };
    
    behaviors {
        shat: one_at {
            compatible = "zmk,behavior-mod-morph";
            label = "ONE_AT";
            #binding-cells = <0>;
            bindings = <&kp N1>, <&kp AT_SIGN>;
            mods = <MOD_RSFT>;
        };
        shhash: two_hash {
            compatible = "zmk,behavior-mod-morph";
            label = "TWO_HASH";
            #binding-cells = <0>;
            bindings = <&kp N2>, <&kp HASH>;
            mods = <MOD_RSFT>;
        };
        shdllr: three_dollar {
            compatible = "zmk,behavior-mod-morph";
            label = "THREE_DOLLAR";
            #binding-cells = <0>;
            bindings = <&kp N3>, <&kp DOLLAR>;
            mods = <MOD_RSFT>;
        };
    };
    
    
    macros {
        psuedo_shift: psuedo_shift {
            label = "psuedo_shift";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &mo 1 &sk LSHFT>
                , <&macro_pause_for_release>
                , <&macro_release &mo 1 &sk LSHFT>
                ;
        };
    };

    
    
    combos {
        compatible = "zmk,combos";
	combo_funlayer {
             timeout-ms = <50>;
             key-positions = <0 11>;
             layers = <0>;
             bindings = <&sl 6>;
         };
	combo_settingslayer {
             timeout-ms = <50>;
             key-positions = <0 11>;
             layers = <NAV_L NUM_L>;
             bindings = <&sl 7>;
         };
	combo_prevtab {
             timeout-ms = <50>;
             key-positions = <19 20>;
             layers = <0>;
             bindings = <&kp LC(LS(TAB))>;
         };
	combo_nexttab {
             timeout-ms = <50>;
             key-positions = <20 21>;
             layers = <0>;
             bindings = < &kp LC(TAB)>;
         };
	combo_pageup {
             timeout-ms = <50>;
             key-positions = <19 20>;
             layers = <NAV_L NUM_L>;
             bindings = <&kp PG_UP>;
         };
	combo_pagedown {
             timeout-ms = <50>;
             key-positions = <31 32>;
             layers = <NAV_L NUM_L>;
             bindings = <&kp PG_DN>;
         };
	combo_home {
             timeout-ms = <50>;
             key-positions = <8 19>;
             layers = <NAV_L NUM_L>;
             bindings = <&kp HOME>;
         };
	combo_end {
             timeout-ms = <50>;
             key-positions = <20 31>;
             layers = <NAV_L NUM_L>;
             bindings = <&kp END>;
         };
	combo_tab {
             timeout-ms = <50>;
             key-positions = <7 8 9>;
             layers = <0>;
             bindings = <&kp TAB>;
         };
	combo_return {
             timeout-ms = <50>;
             key-positions = <19 20 21>;
             layers = <0>;
             bindings = <&kp RET>;
         };
	combo_shifttab {
             timeout-ms = <50>;
             key-positions = <7 8 9>;
             layers = <NAV_L NUM_L>;
             bindings = <&kp LS(TAB)>;
         };
	combo_shiftreturn {
             timeout-ms = <50>;
             key-positions = <19 20 21>;
             layers = <NAV_L NUM_L>;
             bindings = <&kp LS(RET)>;
         };
    };
    

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
 &sk LCMD   &kp Q      &kp W      &kp E       &kp R          &kp T          &kp Y            &kp U          &kp I       &kp O      &kp P         &kp RCMD
 &kp LALT   &kp A      &kp S      &kp D       &kp F          &kp G          &kp H            &kp J          &kp K       &kp L      &kp QUOT      &kp RALT
 &sk LSHFT  &kp Z      &kp X      &kp C       &kp V          &kp B          &kp N            &kp M          &kp COMMA   &kp DOT    &kp FSLH      &kp RSHFT
                       &kp LG(LCTRL) &kp LG(LALT) &sl ALT_L  &mo NAV_L      &kp SPACE        &mo NUM_L      &sk RSHFT   &kp CAPS
            >;
        };
	
        alt_layer {
            label = "alter";
            bindings = <
&trans     &kp LS(N1) &kp LS(N2) &kp LS(N3)  &kp LS(N4)   &kp LS(N5)   &kp GT     &kp TILDE    &kp UNDER    &kp PLUS      &kp LS(TAB) &trans
&trans     &kp LS(N6) &kp LS(N7) &kp LS(N8)  &kp LS(N9)   &kp LS(N0)   &kp LBKT   &kp RBKT     &kp LS(UARW) &kp LG(LC(D)) &kp COLON   &trans
&trans     &kp LG(Z)  &kp LG(X)  &kp LG(C)   &kp LG(V)    &kp LG(B)    &kp F12    &kp LS(LARW) &kp LS(DARW) &kp LS(RARW)  &kp BSLH    &trans
                      &trans     &bt BT_CLR  &trans       &trans       &kp DEL    &trans       &bt BT(0)    &bt BT_NXT
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
&kp LCMD   &kp EXCL   &kp AT     &kp HASH    &kp DLLR        &kp PRCNT    &kp KP_ASTERISK &kp GRAVE      &kp MINUS   &kp EQUAL  &kp TAB    &trans
&kp LALT   &kp CARET  &kp AMPS   &kp ASTRK   &kp LC(LS(TAB)) &kp LC(TAB)  &kp LPAR        &kp RPAR       &kp UARW    &kp TAB    &kp DQT    &trans
&kp LCTRL  &trans     &trans     &trans      &trans          &trans       &trans          &kp LARW       &kp DARW    &kp RARW   &kp RET    &kp RET
                      &trans     &trans      &trans          &trans       &kp BKSP        &trans         &trans      &trans
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
&trans     &kp EXCL   &shat      &shhash     &shdllr   &kp PRCNT   &kp LPAR      &kp RPAR       &kp UNDER    &kp PLUS     &kp ESC    &trans
&trans     &kp AT     &kp N4     &kp N5      &kp N6    &kp GRAVE   &kp LBRC      &kp RBRC       &kp LBRC     &kp RBRC     &kp SEMI   &trans
&trans     &kp TAB    &kp N7     &kp N8      &kp N9    &kp TAB     &trans        &trans         &kp LT       &kp GT       &kp PIPE   &trans
                      &trans     &kp N0      &trans    &trans      &kp DEL       &trans         &kp ESC      &trans
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
&bt BT_CLR &kp LS(N1) &kp LS(N2) &kp LS(N3)  &kp LS(N4)   &kp LS(N5)   &kp LS(N6) &kp NON_US_HASH  &kp ASTRK    &kp GT       &kp LS(N0)  &trans
&trans     &kp LG(A)  &kp LG(S)  &kp LG(D)   &kp LG(F)    &kp LG(H)    &kp F6     &kp LS(TAB)      &kp PG_UP    &kp TILDE    &kp SEMI    &trans
&trans     &kp LG(Z)  &kp LG(X)  &kp LG(C)   &kp LG(V)    &kp LG(B)    &kp F12    &kp HOME         &kp PG_DN    &kp END      &kp LS(RET) &kp RCTRL
                      &trans     &kp LS(N0)  &trans       &trans       &trans     &trans           &bt BT(0)    &bt BT(1)
            >;
        };
	
        shift_layer {
            label = "Shift";
            bindings = <
&trans   &kp LS(Q)    &kp LS(W)   &kp LS(E)   &kp LS(R)   &kp LS(T)    &kp LS(Y)   &kp LS(U)    &kp LS(I)    &kp LS(O)    &kp LS(P)   &trans
&trans   &kp LS(A)    &kp LS(S)   &kp LS(D)   &kp LS(F)   &kp LS(G)    &kp LS(H)   &kp LS(J)    &kp LS(K)    &kp LS(L)    &kp DQT     &trans
&trans   &kp LS(Z)    &kp LS(X)   &kp LS(C)   &kp LS(V)   &kp LS(B)    &kp LS(N)   &kp LS(M)    &kp LBKT     &kp RBKT     &kp BSLH    &trans
                      &trans      &trans      &sl ALT_L   &trans       &kp DEL     &mo NUM_L    &trans       &trans
            >;
        };
	
        double_layer {
            label = "Double";
            bindings = <
&trans   &kp N1       &kp N2      &kp N3      &kp N4      &kp N5       &kp N6      &kp N7       &kp N8       &kp N9       &kp N0      &trans
&trans   &kp GRAVE    &kp UNDER   &kp LBRC    &kp RBRC    &kp BSLH     &trans      &trans       &trans       &trans       &trans      &trans
&trans   &kp TAB      &kp PLUS    &trans      &trans      &trans       &trans      &trans       &trans       &trans       &trans      &trans
                      &trans      &trans      &sl ALT_L   &trans       &trans     &mo NUM_L    &trans       &trans
            >;
        };
        
        extend_layer {
            label = "Extend";
            bindings = <
&trans   &kp LS(N1)   &kp LS(N2)  &kp LS(N3)  &kp LS(N4)  &kp LS(N5)   &kp LS(N6)  &kp LS(N7)   &kp LS(N8)   &kp LS(N9)   &kp LS(N0)  &trans
&trans   &kp GRAVE    &kp MINUS   &kp LBKT    &kp RBKT    &kp BSLH     &trans      &trans       &trans       &trans       &trans      &trans
&trans   &kp TAB      &kp EQUAL   &trans      &trans      &trans       &trans      &trans       &trans       &trans       &trans      &trans
                      &trans      &trans      &trans      &trans       &trans      &trans       &trans       &trans
            >;
        };
	
        fun_layer {
            label = "function";
            bindings = <
&bt BT_CLR &bt BT(0)  &bt BT(1)  &bt BT(2)   &bt BT(3)    &bt BT(4)    &trans     &trans     &trans      &trans       &trans     &trans
&trans     &kp F1     &kp F2     &kp F3      &kp F4       &kp F5       &kp F6     &trans     &trans      &bt BT_PRV   &bt BT_NXT &trans
&trans     &kp F7     &kp F8     &kp F9      &kp F10      &kp F11      &kp F12    &trans     &trans      &trans       &trans     &trans
#ifdef TBLE_DUAL_2U
                      &trans     &trans                  &trans                    &trans       &trans         &trans
#elif defined(TBLE_MIT)
                      &trans     &trans          &trans                &trans             &trans      &trans   &trans
#else
                      &trans     &trans          &trans          &trans       &trans    &trans  &trans         &trans
#endif
            >;
        };
	
        set_layer {
            label = "settings";
            bindings = <
&bt BT_CLR &bt BT(0)  &bt BT(1)  &bt BT(2)   &bt BT(3)    &bt BT(4)    &trans     &trans     &trans      &trans       &trans     &trans
&trans     &kp F1     &kp F2     &kp F3      &kp F4       &kp F5       &kp F6     &trans     &trans      &bt BT_PRV   &bt BT_NXT &trans
&trans     &kp F7     &kp F8     &kp F9      &kp F10      &kp F11      &kp F12    &trans     &trans      &trans       &trans     &trans
#ifdef TBLE_DUAL_2U
                      &trans     &trans                  &trans                    &trans       &trans         &trans
#elif defined(TBLE_MIT)
                      &trans     &trans          &trans                &trans             &trans      &trans   &trans
#else
                      &trans     &trans          &trans          &trans       &trans    &trans  &trans         &trans
#endif
            >;
       };

    };
};
